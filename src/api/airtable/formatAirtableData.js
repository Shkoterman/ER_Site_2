import {
  parseISO,
  format,
  isToday,
  isTomorrow,
  isThisWeek,
  addWeeks,
  startOfWeek,
  endOfWeek,
  isWithinInterval,
} from 'date-fns';
import { toZonedTime } from 'date-fns-tz';
import { ru } from 'date-fns/locale'; // –î–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫

export const formatAirtableData = ({ data }) => {
  if (!data || data.length === 0) {
    console.error('–û—à–∏–±–∫–∞: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏.');
  }



  //—Å—Ç—Ä–æ–∫–∞ –ø–æ–¥ —Å–æ–±—ã—Ç–∏—è —Å –ø–æ
  const firstDate = parseISO(data[0].fields.start_date);
  const lastDate = parseISO(data[data.length - 1].fields.start_date);
  const firstBarcelonaTime = toZonedTime(firstDate, 'Europe/Madrid');
  const lastBarcelonaTime = toZonedTime(lastDate, 'Europe/Madrid');

  const tagsSetByEvents = new Set()
  const timeSetByEvents = new Set()

  return {

    globalTimeSpan: `${format(firstBarcelonaTime, "dd MMMM", { locale: ru })} - ${format(lastBarcelonaTime, 'dd MMMM', { locale: ru })}`,
    events: data.map((record) => {
      // –í—Ä–µ–º—è
      const startDate = record.fields.start_date
        ? new Date(record.fields.start_date)
        : null;
      const stopDate = record.fields.stop_date
        ? new Date(record.fields.stop_date)
        : null;
      let formatedDataStr = record.fields.str_date;
      const dontShowTime = record.fields.dont_show_time || false;

      const barcelonaStartData = toZonedTime(startDate, 'Europe/Madrid'); // —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
      const barcelonaStopData = stopDate
        ? toZonedTime(stopDate, 'Europe/Madrid')
        : null; // —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å

      const formattedTimeForColumns = format(
        barcelonaStartData,
        'EEEE, dd.MM',
        { locale: ru }
      ); // —Ñ–æ—Ä–º–∞—Ç
      const formattedWeekDay = format(barcelonaStartData, 'EEEE', {
        locale: ru,
      }); // —Ñ–æ—Ä–º–∞—Ç
      const formattedDataDay = format(barcelonaStartData, 'dd', { locale: ru }); // —Ñ–æ—Ä–º–∞—Ç
      const formateddataMouth = format(barcelonaStartData, 'MM', {
        locale: ru,
      }); // —Ñ–æ—Ä–º–∞—Ç
      let formatedStartTime = format(barcelonaStartData, 'HH:mm', {
        locale: ru,
      });


      let formattedStartData = format(barcelonaStartData, 'dd MMMM', {
        locale: ru,
      });
      if (!dontShowTime) {
        formattedStartData = formattedStartData + ', ' + formatedStartTime;
        if (stopDate) {
          formattedStartData =
            formattedStartData +
            ' ‚Äî ' +
            format(barcelonaStopData, ' HH:mm', { locale: ru });
        }
      }

      //—á–µ–∫ –Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
      if (dontShowTime) formatedStartTime = '';

      // —ç—Ç–æ –≤—Å—ë –¥–ª—è "–∏ –µ—â—ë 2 –¥–Ω—è"
      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞ "–¥–µ–Ω—å"
      const getDayWord = (num) => {
        if (num % 10 === 1 && num % 100 !== 11) return '–¥–µ–Ω—å';
        if ([2, 3, 4].includes(num % 10) && ![12, 13, 14].includes(num % 100))
          return '–¥–Ω—è';
        return '–¥–Ω–µ–π';
      };

      if (formatedDataStr === undefined) {
        if (
          startDate &&
          barcelonaStopData &&
          startDate.getDate() !== barcelonaStopData.getDate()
        ) {
          //–¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –µ—â—ë –¥–Ω–µ–π
          const dayDifference = Math.ceil(
            (barcelonaStopData - startDate) / (1000 * 60 * 60 * 24) - 1
          );
          formatedDataStr = `–∏ –µ—â—ë ${dayDifference} ${getDayWord(dayDifference)}`;

          //–¥–ª—è —Å –ø–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–≤–µ–Ω—Ç–∞
          if (format(startDate, 'MMMM') === format(barcelonaStopData, 'MMMM')) {
            formattedStartData =
              format(startDate, 'dd ‚Äî ', { locale: ru }) +
              format(barcelonaStopData, 'dd MMMM', { locale: ru }); // —Ñ–æ—Ä–º–∞—Ç —Å –ø–æ
          } else {
            formattedStartData =
              format(startDate, 'dd MMMM ‚Äî ', { locale: ru }) +
              format(barcelonaStopData, 'dd MMMM', { locale: ru }); // —Ñ–æ—Ä–º–∞—Ç —Å –ø–æ
          }
        }
      }

      // —á–∏—Å—Ç–∫–∞ –∏–º–æ–¥–∂–µ–π
      const formateTitle =
        record.fields.Name_event?.replace(
          /[\u{1F600}-\u{1F64F}\u{1F300}-\u{1F5FF}\u{1F680}-\u{1F6FF}\u{1F700}-\u{1F77F}\u{1F780}-\u{1F7FF}\u{1F800}-\u{1F8FF}\u{1F900}-\u{1F9FF}\u{1FA00}-\u{1FA6F}\u{1FA70}-\u{1FAFF}\u{2600}-\u{26FF}\u{2700}-\u{27BF}\u{2300}-\u{23FF}\u{2B50}\u{2764}\u{FE0F}\u{200B}\u{200C}\u{200D}\u{2060}\u{1F004}-\u{1F0CF}\u{1F34A}-]/gu,
          ''
        )?.trim() || ''; // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ undefined

      //–æ–ø–∏—Å–∞–Ω–∏–µ
      const formatedShortDescription =
        record.fields.short_description !== undefined
          ? record.fields.short_description
          : record.fields.event_discriptoin;

      const formatedPrice =
        record.fields.cost_all === 0
          ? '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'
          : record.fields.cost_all === undefined
            ? '—Ö–∑ ü§∑‚Äç‚ôÇÔ∏è'
            : record.fields.cost_all + ' ‚Ç¨';

      const formatedPriceMore =
        record.fields.cost_more === 0

          ? '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'
          : record.fields.cost_more === undefined
            ? ''
            : record.fields.cost_more + ' ‚Ç¨';

      // –ë—É–ª–µ–≤—ã–µ –ø–æ–ª—è –≤—Ä–µ–º–µ–Ω–∏
      const isTodayEvent = isToday(barcelonaStartData);
      const isTomorrowEvent = isTomorrow(barcelonaStartData);
      const isThisWeekEvent = isThisWeek(barcelonaStartData, {
        weekStartsOn: 1,
      });

      const timeTagList = [
        isThisWeekEvent && "–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ",
        isTomorrowEvent && "–ó–∞–≤—Ç—Ä–∞",
        isTodayEvent && "–°–µ–≥–æ–¥–Ω—è",
      ].filter(Boolean);
      //–¥–ª—è –ù–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ

      const nextWeekStart = startOfWeek(addWeeks(new Date(), 1), {
        weekStartsOn: 1,
      });
      const nextWeekEnd = endOfWeek(nextWeekStart, { weekStartsOn: 1 });
      const atNextWeekEvent = isWithinInterval(barcelonaStartData, {
        start: nextWeekStart,
        end: nextWeekEnd,
      });



      const eventTimeList = [];
      // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π Set timeList –∏ –≤ –∏–≤–µ–Ω—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ç—ç–≥–æ–≤ –≤—Ä–µ
      if (isTodayEvent) {
        timeSetByEvents.add('–°–µ–≥–æ–¥–Ω—è');
        eventTimeList.push('–°–µ–≥–æ–¥–Ω—è');
      }
      if (isTomorrowEvent) {
        timeSetByEvents.add('–ó–∞–≤—Ç—Ä–∞');
        eventTimeList.push('–ó–∞–≤—Ç—Ä–∞');
      }
      if (isThisWeekEvent) {
        timeSetByEvents.add('–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ');
        eventTimeList.push('–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ');
      }
      if (atNextWeekEvent) {
        timeSetByEvents.add('–ù–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ');
        eventTimeList.push('–ù–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ');
      }



      if (Array.isArray(record.fields.web_site_tag)) {
        record.fields.web_site_tag.forEach((tag) =>
          tagsSetByEvents.add(tag.trim())
        ); // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π Set
      }

      const soldout = record.fields['–°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç'] > 0
        ? false
        : true;

      const ensaladaEvent = record.fields['–°—Ç–∞—Ç—É—Å'] === 'üëΩ –ß—É–∂–æ–π –∏–≤–µ–Ω—Ç'
        ? false
        : true;

      const moreOnly = record.fields.is_it_subscribers_only === true
        ? true
        : false;

      return {
        id: record.id,
        title: formateTitle,
        time: formattedStartData,
        date: formattedTimeForColumns,
        weekDay: formattedWeekDay,
        dataDay: formattedDataDay,
        dataMouth: formateddataMouth,
        dataTime: formatedStartTime,
        dataStr: formatedDataStr,
        //FromToDate: formatedFromToDate,

        placeName: record.fields.place_name
          ? record.fields.place_name[0]?.trim() || ''
          : '',
        placeAdres: record.fields.place_adres
          ? record.fields.place_adres[0]?.trim() || ''
          : '',
        placeLink: record.fields.place_link
          ? record.fields.place_link[0]?.trim() || ''
          : '',
        shortDescription: formatedShortDescription,
        description: record.fields['–û–ø–∏—Å–∞–Ω–∏–µ']?.trim() || '', // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ undefined
        price: formatedPrice,
        priceMore: formatedPriceMore,
        imageUrl: record.fields.image?.[0]?.url?.trim() || '', // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ undefined
        isToday: isTodayEvent,
        isTomorrow: isTomorrowEvent,
        isThisWeek: isThisWeekEvent,
        atNextWeek: atNextWeekEvent,
        eventTagList: record.fields.web_site_tag ? [...record.fields.web_site_tag, '–í—Å–µ'] : ['–í—Å–µ'],
        eventTimeList: eventTimeList,
        eventExternalLink: record.fields.external_link?.trim() || '',
        eventProfeePagelLink: record.fields.profee_page_link?.trim() || '',
        soldOut: soldout,
        moreOnly: moreOnly,
        ensaladaEvent: ensaladaEvent,
        timeTagList: timeTagList,


      };
    }),
    tagsSetByEvents: tagsSetByEvents.add('–í—Å–µ'),
    timeSetByEvents: timeSetByEvents.add('–í—Å–µ–≥–¥–∞'),
  };
};
